name: Get WAF Block Log trieulv

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Development environment'
        required: true
        default: 'dev01'
        type: choice
        options:
          - dev01
      from_datetime:
        description: 'Start datetime to collect logs. Input for JST time zone, format: YYYY/MM/DD hh:mm:ss'
        required: true
        type: string
      to_datetime:
        description: 'End datetime to collect logs. Input for JST time zone, format: YYYY/MM/DD hh:mm:ss'
        required: true
        type: string
      limit:
        description: 'Number of logs (must be between 1 and 1000, default is 200)'
        type: number
        default: 200

jobs:
  get-waf-log:
    runs-on: ubuntu-latest
    permissions:
        id-token: write
        contents: read
    outputs:
      waf-log: ${{ steps.processing_query.outputs.processed_result }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ap-northeast-1
          role-to-assume: arn:aws:iam::022269452713:role/GitHubActionsAthenaRole
          role-session-name: github-athena-session

      - name: Validate input parameters
        run: |
          function check_datetime() {
            if [[ ! "$1" =~ ^[0-9]{4}/[0-9]{2}/[0-9]{2}\ [0-9]{2}:[0-9]{2}:[0-9]{2}$ ]] || ! date -d "$1" > /dev/null 2>&1; then
              echo "Error: Invalid datetime value '$1'. Please enter a valid datetime format YYYY/MM/DD hh:mm:ss" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          }
          check_datetime "${{ github.event.inputs.from_datetime }}"
          check_datetime "${{ github.event.inputs.to_datetime }}"
          echo "from_date=$(echo ${{ github.event.inputs.from_datetime }} | awk '{print $1}')" >> $GITHUB_ENV
          echo "to_date=$(echo ${{ github.event.inputs.to_datetime }} | awk '{print $1}')" >> $GITHUB_ENV
          if ! [[ "${{ github.event.inputs.limit }}" =~ ^[0-9]+$ ]] || (( ${{ github.event.inputs.limit }} == 0 )) || (( ${{ github.event.inputs.limit }} > 1000 )); then
            echo "Error: Invalid limit value '${{ github.event.inputs.limit }}'. Number must be between 1 and 1000." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
      - name: Start Athena query execution
        run: |
          query=$(cat <<EOF
          SELECT
            date_format(from_unixtime("timestamp" / 1000 + 9 * 3600), '%Y/%m/%d %H:%i:%s') as datetime,
            action,
            httprequest.uri,
            terminatingruleid,
            httprequest.country,
            groupList.terminatingRule.ruleId as ruleid,
            header,
            terminatingrulematchdetails,
            httprequest.args
          from
            "db_dev01_waf_log_testing"."tb_dev01_waf_log",
            CROSS JOIN UNNEST(ruleGroupList) AS t1 (groupList)
            CROSS JOIN UNNEST(httprequest.headers) AS t2 (header)
          where
            "date" between '$from_date' and '$to_date'
            and action = 'ALLOW'
            # and date_format(from_unixtime("timestamp" / 1000 + 9 * 3600), '%Y/%m/%d %H:%i:%s') between  '${{ github.event.inputs.from_datetime }}' and '${{ github.event.inputs.to_datetime }}'
          ORDER BY datetime DESC
          LIMIT ${{ github.event.inputs.limit }};
          EOF
          )
          query_execution_id=$(aws athena start-query-execution \
                          --query-string "$query" \
                          --query-execution-context Database=db_dev01_waf_log_testing,Catalog=AwsDataCatalog \
                          --work-group "dev01-waf-log-testing" \
                          --output text \
                          --query 'QueryExecutionId')
          echo "query_execution_id=$query_execution_id" >> $GITHUB_ENV
      - name: Check Athena query execution status
        run: |
         while true; do
          status=$(aws athena get-query-execution --query-execution-id $query_execution_id --query 'QueryExecution.Status.State' --output text)
          echo "Current status: $status"
          if [[ "$status" != "SUCCEEDED" ]]; then
            break
          elif [[ "$status" == "FAILED" || "$status" == "CANCELLED" ]]; then
            echo "Athena query failed with status: $status"
            exit 1
          fi
          sleep 5
         done
      - name: Process Athena query results
        id: processing_query
        run: |
          query_result=$(aws athena get-query-results --query-execution-id $query_execution_id)
          processed_result=$(echo "$query_result" | jq -c '.ResultSet.Rows
              | .[1:]
              | map({
                  datetime: .Data[0].VarCharValue,
                  action: .Data[1].VarCharValue,
                  uri: .Data[2].VarCharValue,
                  terminatingruleid: .Data[3].VarCharValue,
                  country: .Data[4].VarCharValue,
                  ruleid: .Data[5].VarCharValue,
                  header: .Data[6].VarCharValue,
                  terminatingrulematchdetails: .Data[7].VarCharValue,
                  args: .Data[8].VarCharValue
                })
              | map(@json)
              | join("\n")' \
            | sed 's/^"\+//; s/"\+$//;'
          )
  slack-send-log:
    needs: get-waf-log
    runs-on: ubuntu-latest
    steps:
      - name: Format Slack message
        run: |
          logs=${{ needs.get-waf-log.outputs.waf-log }}
          message="*[Tiếng Việt]*\nTitle Tiếng Việt\n\n*[English]*\nTittle Tiếng anh\n\n*[Logs - ${{ github.event.inputs.env }}]*\n\`\`\`json\n$logs\n\`\`\`"
          echo "$message" > slack_message.txt
      - name: Send message to Slack via webhook and check status
        id: send_slack
        run: |
          payload=$(jq -Rs '{text: .}' < slack_message.txt)
          status_code=$(curl -s -o response.txt -w "%{http_code}" -X POST -H 'Content-type: application/json' --data "$payload" ${{ secrets.SLACK_WEBHOOK_URL_DEV }})
          echo "status_code=$status_code" >> $GITHUB_OUTPUT
      - name: Check Slack message status
        run: |
          if [[ "${{ steps.send_slack.outputs.status_code }}" != "200" ]]; then
            echo "Slack message sending failed with status code: ${{ steps.send_slack.outputs.status_code }}"
            cat response.txt
            exit 1
          else
            echo "Slack message sent successfully."
          fi