name: Toggle EventBridge

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environment (e.g., dev01, dev02)"
        required: true
        type: choice
        options:
          - dev01
          - dev02
      schedule_name:
        description: "Batch Rule Name (without prefix)"
        required: true
        type: choice
        options:
          - enable-disable-test
          - enable-disable
      schedule_state:
        description: "Desired state (ENABLED or DISABLED)"
        required: true
        type: choice
        options:
          - ENABLED
          - DISABLED

jobs:
  toggle-scheduler:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::022269452713:role/AssumeRoleGHAction
          aws-region: ap-southeast-1

      - name: Check current Scheduler State
        id: validate_schedule
        run: |
          schedule_full_name=td-${{ inputs.env }}-${{ inputs.schedule_name }}
          echo "schedule_full_name=$schedule_full_name" >> $GITHUB_OUTPUT

          response_get=$(aws scheduler get-schedule --name "$schedule_full_name" 2>&1) || {
            echo "Error: Failed to retrieve the scheduler $schedule_full_name!" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$response_get" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          }

          # Check current state
          current_state=$(echo "$response_get" | jq -r '.State')
          if [ "$current_state" = "${{ inputs.schedule_state }}" ]; then
            echo "Scheduler \`$schedule_full_name\` is already in desired state:\`$current_state\`." >> $GITHUB_STEP_SUMMARY
            echo "matched=true" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "matched=false" >> $GITHUB_OUTPUT
          fi

          echo "schedule_json=$(echo "$response_get" | base64 -w 0)" >> $GITHUB_OUTPUT
      - name: Validate and update Scheduler State
        if: steps.validate_schedule.outputs.matched == 'false'
        run: |
          # Removing read-only fields
          json_decode=$(echo "${{ steps.validate_schedule.outputs.schedule_json }}" | base64 -d)
          json_input=$(echo "$json_decode" | jq -c 'del(.Arn, .CreationDate, .LastModificationDate)')

          # Update state
          response_update=$(aws scheduler update-schedule --cli-input-json "$json_input" --state "${{ inputs.schedule_state }}" 2>&1) || {
            echo "Error: Failed to update the scheduler ${{ steps.validate_schedule.outputs.schedule_full_name }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$response_update" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          }

          echo "Successfully updated scheduler ${{ steps.validate_schedule.outputs.schedule_full_name }} to ${{ inputs.schedule_state }}!" >> $GITHUB_STEP_SUMMARY