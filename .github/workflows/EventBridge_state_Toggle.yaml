name: Toggle EventBridge Scheduler State

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environment (e.g., dev01, dev02)"
        required: true
        type: choice
        options:
          - dev01
          - dev02
      batch_name:
        description: "Batch Rule Name (without prefix)"
        required: true
        type: choice
        options:
          - enable-disable-test
          - enable-disable
      state:
        description: "Desired state (ENABLED or DISABLED)"
        required: true
        type: choice
        options:
          - ENABLED
          - DISABLED

jobs:
  toggle-scheduler:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::022269452713:role/GitHubActionsAthenaRole
          aws-region: ap-southeast-1

      - name: Set environment variables
        run: |
          echo "SCHEDULER_NAME=td-${{ inputs.env }}-${{ inputs.batch_name }}" >> $GITHUB_ENV
          echo "DESIRED_STATE=${{ inputs.state }}" >> $GITHUB_ENV

      - name: Fetch scheduler info and handle logic
        id: update_schedule_state
        run: |
          RAW_JSON=$(aws scheduler get-schedule --name "$SCHEDULER_NAME" 2>&1 || true)
          # Check exist
          if echo "$RAW_JSON" | grep -q "ResourceNotFoundException"; then
            echo "Scheduler \`$SCHEDULER_NAME\` does not exist." >> $GITHUB_STEP_SUMMARY
            echo "not_found=true" >> "$GITHUB_OUTPUT"
            exit 1
          fi

          SCHEDULER_JSON=$(echo "$RAW_JSON" | jq '.')

          CURRENT_STATE=$(echo "$SCHEDULER_JSON" | jq -r '.State')
          # Check current state
          if [ "$CURRENT_STATE" = "$DESIRED_STATE" ]; then
            echo "Scheduler \`$SCHEDULER_NAME\` is already in desired state: $CURRENT_STATE." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          # Prepare new JSON for update
          JSON_INPUT=$(echo "$SCHEDULER_JSON" | jq --arg state "$DESIRED_STATE" '
            .State = $state
            | del(.Arn, .CreationDate, .LastModificationDate)
          ')

          aws scheduler update-schedule --cli-input-json "$JSON_INPUT"

          echo "Successfully updated scheduler \`$SCHEDULER_NAME\` to \`$DESIRED_STATE\`." >> $GITHUB_STEP_SUMMARY

      - name: Handle unexpected error
        if: failure() && steps.update_schedule_state.outputs.not_found != 'true'
        run: |
          echo "An unexpected error occurred during the workflow execution." >> $GITHUB_STEP_SUMMARY
