name: Toggle EventBridge Scheduler State

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environment (e.g., dev01, dev02)"
        required: true
        type: choice
        options:
          - dev01
          - dev02
      batch_name:
        description: "Batch Rule Name (without prefix)"
        required: true
        type: choice
        options:
          - enable-disable-test
          - enable-disable
      state:
        description: "Desired state (ENABLED or DISABLED)"
        required: true
        type: choice
        options:
          - ENABLED
          - DISABLED

jobs:
  toggle-scheduler:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::022269452713:role/GitHubActionsAthenaRole
          aws-region: ap-southeast-1

      - name: Set environment variables
        run: |
          echo "SCHEDULER_NAME=td-${{ inputs.env }}-${{ inputs.batch_name }}" >> $GITHUB_ENV
          echo "DESIRED_STATE=${{ inputs.state }}" >> $GITHUB_ENV

      - name: Fetch scheduler info and handle logic
        id: update_schedule_state
        run: |
          set +e
          result=$(aws scheduler get-schedule --name "$SCHEDULER_NAME" 2>&1)
          status=$?
          # Check exist
          if [ "$status" -ne "0" ]; then
            echo "Error: Lỗi khi lấy thông tin schedule từ AWS" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$result" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Check current state
          CURRENT_STATE=$(echo "$result" | jq -r '.State')
          if [ "$CURRENT_STATE" = "$DESIRED_STATE" ]; then
            echo "Scheduler \`$SCHEDULER_NAME\` is already in desired state: $CURRENT_STATE." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          # Prepare new JSON for update
          result=$(echo "$result" | jq '.')
          echo "result: '$result'" >> $GITHUB_STEP_SUMMARY
          json_input=$(echo "$result" | jq -c 'del(.Arn, .CreationDate, .LastModificationDate)')

          # Update state
          output=$(aws scheduler update-schedule --cli-input-json "$json_input" --state "$DESIRED_STATE" 2>&1)
          status=$?
          echo "$output"
          if [ "$status" -ne 0 ]; then
            echo "Error: Lỗi khi cập nhật thông tin schedule trên AWS" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$output" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "Successfully updated scheduler \`$SCHEDULER_NAME\` to \`$DESIRED_STATE\`." >> $GITHUB_STEP_SUMMARY

