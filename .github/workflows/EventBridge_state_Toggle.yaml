name: Toggle EventBridge

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Environment (e.g., dev01, dev02)"
        required: true
        type: choice
        options:
          - dev01
          - dev02
      batch_name:
        description: "Batch Rule Name (without prefix)"
        required: true
        type: choice
        options:
          - enable-disable-test
          - enable-disable
      state:
        description: "Desired state (ENABLED or DISABLED)"
        required: true
        type: choice
        options:
          - ENABLED
          - DISABLED

jobs:
  toggle-scheduler:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::022269452713:role/GitHubActionsAthenaRole
          aws-region: ap-southeast-1

      - name: Set environment variables
        run: |
          echo "schedule_name=td-${{ inputs.env }}-${{ inputs.batch_name }}" >> $GITHUB_ENV
          echo "desired_state=${{ inputs.state }}" >> $GITHUB_ENV

      - name: Validate the existence and current state of the schedule
        id: validate_schedule
        run: |
          set +e
          result=$(aws scheduler get-schedule --name "$schedule_name" 2>&1)
          status=$?

          # Check existence
          if echo "$result" | grep -q "ResourceNotFoundException"; then
            echo "Scheduler '$schedule_name' does not exist." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Check error
          if [ "$status" -ne "0" ]; then
            echo "Error: Failed to retrieve the scheduler \`$schedule_name\`!" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$result" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Check current state
          current_state=$(echo "$result" | jq -r '.State')
          if [ "$current_state" = "$desired_state" ]; then
            echo "Scheduler \`$schedule_name\` is already in desired state:\`$current_state\`." >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          echo "result<<EOF" >> $GITHUB_OUTPUT
          echo "$result" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Update schedule state
        run: |
          # Prepare new JSON for update
          echo "${{ steps.validate_schedule.outputs.result }}" >> $GITHUB_STEP_SUMMARY
          result="${{ steps.validate_schedule.outputs.result }}"
          json_input=$(echo "$result" | jq -c 'del(.Arn, .CreationDate, .LastModificationDate)')
          echo "$input" >> $GITHUB_STEP_SUMMARY
          # Update state
          output=$(aws scheduler update-schedule --cli-input-json "$json_input" --state "$desired_state" 2>&1)
          status=$?
          echo "status: $status" >> $GITHUB_STEP_SUMMARY
          if [ "$status" -ne 0 ]; then
            echo "Error: Failed to update the scheduler \`$schedule_name\`!" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$output" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "Successfully updated scheduler \`$schedule_name\` to \`$desired_state\`." >> $GITHUB_STEP_SUMMARY