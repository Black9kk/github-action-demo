name: Check input date

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: "Select environment"
        required: true
        options:
          - dev01
          - dev02
          - dev03
      start_time:
        required: true
        type: string
      end_time:
        required: true
        type: string

jobs:
  get-waf-log:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      id-token: write
      contents: read
    outputs:
      waf-log: 
    steps:
      - name: Configure AWS credentials via Assume Role
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::022269452713:role/GitHubActionsAthenaRole  # Update this!
          role-duration-seconds: 1800
          aws-region: ap-southeast-1  # region of Athena/S3
          role-session-name: github-athena-session

      - name: Install dependencies
        run: |
            pip install awscli
            pip install boto3
      - name: Check AWS CLI
        run: |
            which aws || echo "AWS CLI not found"
            aws --version || echo "Cannot get AWS CLI version"
      - name: print date input
        run: |
          echo "Start Time: ${{ github.event.inputs.start_time }}"
          echo "Start End: ${{ github.event.inputs.end_time }}"
      - name: Validate input time format
        id: validate
        run: |
          regex='^[0-9]{4}/[0-9]{2}/[0-9]{2}[ ][0-9]{2}:[0-9]{2}:[0-9]{2}$'
          start_time="${{ github.event.inputs.start_time }}"
          end_time="${{ github.event.inputs.end_time }}"

          if [[ ! "$start_time" =~ $regex ]] || [[ ! "$end_time" =~ $regex ]]; then
            echo "## ❌ Invalid time format. Must be 'YYYY/MM/DD HH:MM:SS'" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "## ✅ Valid time format"
          # Set environment variable
          echo "from_date=${{ inputs.start_time }}" >> $GITHUB_ENV
          echo "to_date=${{ inputs.end_time }}" >> $GITHUB_ENV
          
      - name: Athena query execution
        run: |
          query_string=$(cat <<EOF
            Select
              *
            from 
              "db_dev01_waf_log_testing"."tb_dev01_waf_log"
          EOF
          )
            # Execute query
            queryExecutionId=$(aws athena start-query-execution \
            --query-string "$query_string" \
            --query-execution-context Database=db_dev01_waf_log_testing \
            --work-group "dev01-waf-log-testing" \
            --output text \
            --query 'QueryExecutionId')

            echo "Athena query id: $queryExecutionId" >> $GITHUB_STEP_SUMMARY
            echo "queryExecutionId=$queryExecutionId" >> $GITHUB_STEP_SUMMARY
