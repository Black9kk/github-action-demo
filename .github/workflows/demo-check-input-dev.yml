name: Send log to slack Dev

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: "Select environment"
        required: true
        options:
          - dev01
          - dev02
          - dev03
      start_time:
        required: true
        type: string
      end_time:
        required: true
        type: string

jobs:
  get-waf-log:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      id-token: write
      contents: read
    outputs:
      waf-log: 
    steps:
      - name: Configure AWS credentials via Assume Role
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::022269452713:role/GitHubActionsAthenaRole
          role-duration-seconds: 1800
          aws-region: ap-southeast-1  # region of Athena/S3
          role-session-name: github-athena-session

      - name: Install dependencies
        run: |
            pip install awscli
            pip install boto3
      - name: Check AWS CLI
        run: |
            which aws || echo "AWS CLI not found"
            aws --version || echo "Cannot get AWS CLI version"
      - name: print date input
        run: |
          echo "Start Time: ${{ github.event.inputs.start_time }}"
          echo "Start End: ${{ github.event.inputs.end_time }}"
      - name: Validate input time format
        id: validate
        run: |
          regex='^[0-9]{4}/[0-9]{2}/[0-9]{2}$'
          start_time="${{ github.event.inputs.start_time }}"
          end_time="${{ github.event.inputs.end_time }}"
          if [[ ! "$start_time" =~ $regex ]] || [[ ! "$end_time" =~ $regex ]]; then
            echo "## ❌ Invalid time format. Must be 'YYYY/MM/DD'" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "## ✅ Valid time format"
          # Set environment variable
          echo "from_date=${{ inputs.start_time }}" >> $GITHUB_ENV
          echo "to_date=${{ inputs.end_time }}" >> $GITHUB_ENV
          
      - name: Athena query execution
        run: |
          ENV_NAME="${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          DATABASE="db_${ENV_NAME}_waf_log_testing"
          WORKGROUP="${ENV_NAME}-waf-log-testing"
          QUERY_STRING=$(cat <<EOF
            SELECT
              date_format(from_unixtime("timestamp" / 1000 + 9 * 3600), '%Y/%m/%d %H:%i:%s') AS datetime,
                action,
                httprequest.uri,
                terminatingruleid,
                httprequest.country,
                groupList.terminatingRule.ruleId AS ruleid,
                header,
                terminatingrulematchdetails,
                httprequest.args
            FROM            
                "db_dev01_waf_log_testing"."tb_dev01_waf_log"
                CROSS JOIN UNNEST(ruleGroupList) AS t1 (groupList)
                CROSS JOIN UNNEST(httprequest.headers) AS t2 (header)
            WHERE
                "date" >= '${{ env.from_date }}'
                AND "date" <= '${{ env.to_date }}'
                AND action = 'ALLOW'
                AND header.name = 'X-Forwarded-For'
            ORDER BY datetime DESC;
          EOF
          )
          echo "QUERY_STRING"
            QUERY_ID=$(aws athena start-query-execution \
            --query-string "$QUERY_STRING" \
            --query-execution-context Database=$DATABASE \
            --work-group "$WORKGROUP" \
            --output text --query 'QueryExecutionId')

          echo "Query ID: $QUERY_ID"

          # Wait for query to complete
          while true; do
            STATUS=$(aws athena get-query-execution --query-execution-id $QUERY_ID --query 'QueryExecution.Status.State' --output text)
            echo "Status: $STATUS"
            if [ "$STATUS" == "SUCCEEDED" ]; then break; fi
            if [ "$STATUS" == "FAILED" ] || [ "$STATUS" == "CANCELLED" ]; then
              echo "Athena query failed: $ERROR_MESSAGE"
              exit 1
            fi
            sleep 5
          done

          # Lấy kết quả Athena, bỏ dòng tiêu đề, xử lý từng dòng từ stdout
          echo "Query execution result processing"
          aws athena get-query-results \
            --query-execution-id "$QUERY_ID" \
            --output json > result.json

          jq -r '
            .ResultSet.Rows as $rows |
            $rows[0].Data | map(.VarCharValue) as $headers |
            $rows[1:][] | .Data | map(.VarCharValue // "") as $values |
            reduce range(0; $headers | length) as $i
              ({}; . + { ($headers[$i]): $values[$i] }) |
            @json
            ' result.json > log_output.txt

      # - name: Send logs to Slack
      #   env:
      #     SLACK_WEBHOOK_URL_DEV: ${{ secrets.SLACK_WEBHOOK_URL_DEV }}
      #   run: |
      #     logs_content=$(cat log_output.txt | sed 's/"/\\"/g')
      #     #logs_content=$(head -n 10 log_output.txt | sed 's/"/\\"/g')
      #     echo "Message: $logs_content"
      #     rm -f log_output.txt
      #     # Send message to slack
      #     message=$(cat <<EOF
      #       {
      #         "text": "*[Tiếng Việt]*\nThông tin log waf\n\n*[English]*\nInfo Log WAF\n\n*[Logs - ${{ env.ENV_NAME }}]*\n\`\`\`\n$logs_content\n\`\`\`"
      #       }
      #     EOF
      #     )

      #     echo "Sending message to Slack..."
      #     curl -X POST -H 'Content-type: application/json' --data "$message" "$SLACK_WEBHOOK_URL_DEV"
      - name: Send logs file to Slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}  # Slack bot token
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}  # Channel ID to send the file
        run: |
          # Đảm bảo tệp log_output.txt tồn tại
          if [ -f log_output.txt ]; then
            echo "Sending log file to Slack..."
       
            # Sử dụng Slack API để upload tệp
            curl -X POST -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-Type: multipart/form-data" \
            -F "channels=$SLACK_CHANNEL_ID" \
            -F "file=@log_output.txt" \
            https://slack.com/api/files.upload_v2

            echo "Log file sent to Slack."
          else
            echo "Log file not found!"
          fi
    

